import pymel.core as pmc
from itertools import izip
import maya.cmds as cmds


'''
To use the script copy into scripts folder. Select an Ik handle, then in command line type import stretchy.py, then stretchy.Translate() or stretchy.Scale() depending on how you want to strech 
the joints. 
'''

    
def Translate():
    '''
    Function that uses the Translate attributes to scale the joints 
    '''
   
    #Setting up the main variables and establishing a namebase 
    ik = pmc.ls(sl=True, type = 'ikHandle')[0]
    namebase = ik.split('_')[0]
    startJoint = pmc.ikHandle(query = True, sj= True)
    endEffector = pmc.ikHandle(query = True, ee = True)
    endJoint = pmc.listConnections(endEffector, type = 'joint')[0]
    pmc.select(startJoint, hi = True)
    jointChain = pmc.ls(sl = True, type = 'joint' )
    
    #Creates the locators and applies point constraints 
    locator1 = pmc.spaceLocator(name = namebase + "_locator")
    locator2 = pmc.spaceLocator(name = namebase + "_locator")
    
    shapeLocator1 = locator1.getShape()
    shapeLocator2 = locator2.getShape()
    
    
    pmc.pointConstraint(startJoint, locator1, mo = False)
    pmc.pointConstraint(ik, locator2, mo = False)
    distanceBetween = pmc.shadingNode('distanceBetween',asUtility = True, name = namebase + "_distanceBetween")
    
    pmc.connectAttr(shapeLocator1.worldPosition[0], distanceBetween.point1)
    pmc.connectAttr(shapeLocator2.worldPosition[0], distanceBetween.point2 )
    
    #selecting start joints 
    
    sum = 0; 
    
	#finding Max Distance 
    for jnt in xrange(1, len(jointChain)):    
        if (jointChain[jnt] <= endJoint):
            transX = pmc.joint(jointChain[jnt], query = True, p = True, relative = True)[0] 
            sum+=abs(transX)
            print sum
    
    #print sum
    
       
            
    #create multiply Divide Node
    mult = pmc.createNode('multiplyDivide', name = namebase + "_multiplyDivide")
    pmc.setAttr(mult.operation,  2)
    pmc.setAttr(mult.input2X, sum)
    
    pmc.connectAttr(distanceBetween.distance, mult.input1X)
    
    
    
    clamp = pmc.createNode('clamp', name = namebase + "_clamp")
    
    pmc.setAttr(clamp.minR,  1.0)
    pmc.setAttr(clamp.maxR,  2.0)
    
    pmc.connectAttr(mult.outputX, clamp.inputR)
    
	#For loop traverses through the joints in the chain, and creates a multiply divide node for each of them. It then connects the clamp node to the new multiply and divide node 
    for i in xrange (1, len(jointChain)):
        if (jointChain[i] <= endJoint):
            newMult = pmc.createNode('multiplyDivide', name = namebase + "_multiplyDivide" )
            pmc.connectAttr(clamp.outputR, newMult.input1X)
            translateX_value = pmc.joint(jointChain[i], query = True, p = True, relative = True)[0]
            pmc.setAttr(newMult.input2X,translateX_value )
            pmc.connectAttr(newMult.outputX, jointChain[i].translateX)
            
            
